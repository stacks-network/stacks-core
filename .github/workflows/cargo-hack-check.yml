name: Cargo Hack Check

on:
  workflow_call:

env:
  RUST_BACKTRACE: full

concurrency:
  group: cargo-hack-check-${{ github.head_ref || github.ref || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # Setup job to prepare common dependencies
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      rust-toolchain: ${{ steps.toolchain.outputs.rust-toolchain }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Get Rust toolchain
        id: toolchain
        run: echo "rust-toolchain=$(cat ./rust-toolchain)" >> $GITHUB_OUTPUT

  # Native targets (Windows/Linux)
  native-targets:
    name: All Crates (Windows/Linux)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@11df97af8e8102fd60b60a77dfbf58d40cd843b8 # v1.10.1
        with:
          toolchain: ${{ needs.setup.outputs.rust-toolchain }}
          target: x86_64-pc-windows-gnu,x86_64-unknown-linux-gnu
          cache: false

      - name: Install cargo-hack
        uses: taiki-e/install-action@2383334cf567d78771fc7d89b6b3802ef1412cf6  # v2.56.8
        with:
          tool: cargo-hack

      - name: Install Windows cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Run cargo hack check
        run: |
          cargo hack check \
            --all \
            --each-feature \
            --no-dev-deps \
            --exclude-features=wasm-deterministic,wasm-web \
            --target x86_64-pc-windows-gnu \
            --target x86_64-unknown-linux-gnu

  # WASM targets - No caching needed as it runs in parallel with longer jobs
  wasm-targets:
    name: WASM targets
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@11df97af8e8102fd60b60a77dfbf58d40cd843b8 # v1.10.1
        with:
          toolchain: ${{ needs.setup.outputs.rust-toolchain }}
          target: wasm32-unknown-unknown
          cache: false

      - name: Install cargo-hack
        uses: taiki-e/install-action@2383334cf567d78771fc7d89b6b3802ef1412cf6 # v2.56.8
        with:
          tool: cargo-hack

      - name: Run cargo hack check (WASM Web)
        run: |
          cargo hack check \
            -p clarity-serialization \
            -p stacks-common \
            --each-feature \
            --no-dev-deps \
            --exclude-features=default,rusqlite,ctrlc-handler,wasm-deterministic \
            --features=wasm-web

      - name: Run cargo hack check (WASM Deterministic)
        run: |
          cargo hack check \
            -p clarity-serialization \
            -p stacks-common \
            --each-feature \
            --no-dev-deps \
            --include-features=wasm-deterministic,slog_json \
            --features=wasm-deterministic

      - name: Run cargo hack check
        run: ${{ matrix.command }}

  fuzz-targets:
    name: Fuzz targets (nightly)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install Rust nightly toolchain
        uses: actions-rust-lang/setup-rust-toolchain@fb51252c7ba57d633bc668f941da052e410add48 # v1.13.0
        with:
          toolchain: nightly
          cache: false

      - name: Check fuzz targets (clarity)
        run: |
          cargo +nightly check \
            --manifest-path clarity/fuzz/Cargo.toml \
            --bins \
            --locked

      - name: Check fuzz targets (stackslib)
        run: |
          cargo +nightly check \
            --manifest-path stackslib/fuzz/Cargo.toml \
            --bins \
            --locked
