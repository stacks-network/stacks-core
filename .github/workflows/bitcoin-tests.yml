## Github workflow to run bitcoin tests

name: Tests::Bitcoin

on:
  workflow_call:

## env vars are transferred to composite action steps
env:
  BITCOIND_TEST: 1
  RUST_BACKTRACE: full
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 15
  TEST_TIMEOUT: 30

concurrency:
  group: bitcoin-tests-${{ github.head_ref || github.ref || github.run_id}}
  ## Only cancel in progress if this is for a PR
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  generate-tests:
    name: Generate JSON of tests to run
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      ## Setup test environment
      - name: Setup Test Environment
        id: setup_tests
        uses: stacks-network/actions/stacks-core/testenv@main
        with:
          btc-version: "25.0"
      - name: Generate tests JSON
        id: generate_tests_json
        # List all of the tests using the nextest archive (so we don't need to do another build task)
        # Filter them such that we only select tests from `--bin stacks-node` which are marked `ignored`
        # Transform the output JSON into something that can be used as the matrix input
        run: |
          cargo nextest list --archive-file ~/test_archive.tar.zst -Tjson | \
          jq -c '.["rust-suites"]["stacks-node::bin/stacks-node"]["testcases"] | map_values(select(.["ignored"] == true)) | keys' > ./tests.json
      - id: set-matrix
        run: |
          json_obj=`cat ./tests.json`
          echo "matrix=$json_obj" >> $GITHUB_OUTPUT

  # Bitcoin integration tests with code coverage
  integration-tests:
    needs: generate-tests
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      ## Continue with the test matrix even if we've had a failure
      fail-fast: false
      ## Run a maximum of 32 concurrent tests from the test matrix
      max-parallel: 32
      matrix:
        test-name: ${{fromJson(needs.generate-tests.outputs.matrix)}}
        exclude:
          # The following tests are excluded from CI runs. Some of these may be
          #  worth investigating adding back into the CI
          - test-name: tests::bitcoin_regtest::bitcoind_integration_test_segwit
          - test-name: tests::nakamoto_integrations::consensus_hash_event_dispatcher
          - test-name: tests::neon_integrations::atlas_integration_test
          - test-name: tests::neon_integrations::atlas_stress_integration_test
          - test-name: tests::neon_integrations::bitcoind_resubmission_test
          - test-name: tests::neon_integrations::block_replay_integration_test
          - test-name: tests::neon_integrations::deep_contract
          - test-name: tests::neon_integrations::filter_txs_by_origin
          - test-name: tests::neon_integrations::filter_txs_by_type
          - test-name: tests::neon_integrations::lockup_integration
          - test-name: tests::neon_integrations::most_recent_utxo_integration_test
          - test-name: tests::neon_integrations::run_with_custom_wallet
          - test-name: tests::neon_integrations::test_competing_miners_build_anchor_blocks_and_microblocks_on_same_chain
          - test-name: tests::neon_integrations::test_competing_miners_build_anchor_blocks_on_same_chain_without_rbf
          - test-name: tests::neon_integrations::test_one_miner_build_anchor_blocks_on_same_chain_without_rbf
          - test-name: tests::signer::v0::tenure_extend_after_2_bad_commits
          - test-name: tests::stackerdb::test_stackerdb_event_observer
          - test-name: tests::stackerdb::test_stackerdb_load_store
          # Microblock tests that are no longer needed on every CI run
          #  (microblocks are unsupported starting in Epoch 2.5)
          - test-name: tests::neon_integrations::bad_microblock_pubkey
          - test-name: tests::neon_integrations::microblock_fork_poison_integration_test
          - test-name: tests::neon_integrations::microblock_integration_test
          - test-name: tests::neon_integrations::microblock_large_tx_integration_test_FLAKY
          - test-name: tests::neon_integrations::microblock_limit_hit_integration_test
          - test-name: tests::neon_integrations::microblock_miner_multiple_attempts
          - test-name: tests::neon_integrations::test_problematic_microblocks_are_not_mined
          - test-name: tests::neon_integrations::test_problematic_microblocks_are_not_relayed_or_stored
          - test-name: tests::neon_integrations::runtime_overflow_unconfirmed_microblocks_integration_test
          - test-name: tests::neon_integrations::size_overflow_unconfirmed_invalid_stream_microblocks_integration_test
          - test-name: tests::neon_integrations::size_overflow_unconfirmed_microblocks_integration_test
          - test-name: tests::neon_integrations::size_overflow_unconfirmed_stream_microblocks_integration_test
          - test-name: tests::epoch_25::microblocks_disabled
          # Epoch tests are covered by the epoch-tests CI workflow, and don't need to run
          #  on every PR (for older epochs)
          - test-name: tests::epoch_205::bigger_microblock_streams_in_2_05
          - test-name: tests::epoch_205::test_cost_limit_switch_version205
          - test-name: tests::epoch_205::test_dynamic_db_method_costs
          - test-name: tests::epoch_205::test_exact_block_costs
          - test-name: tests::epoch_205::transition_empty_blocks
          - test-name: tests::epoch_21::test_pox_missing_five_anchor_blocks
          - test-name: tests::epoch_21::test_pox_reorg_flap_duel
          - test-name: tests::epoch_21::test_pox_reorg_flap_reward_cycles
          - test-name: tests::epoch_21::test_pox_reorg_one_flap
          - test-name: tests::epoch_21::test_pox_reorgs_three_flaps
          - test-name: tests::epoch_21::test_sortition_divergence_pre_21
          - test-name: tests::epoch_21::test_v1_unlock_height_with_current_stackers
          - test-name: tests::epoch_21::test_v1_unlock_height_with_delay_and_current_stackers
          - test-name: tests::epoch_21::trait_invocation_cross_epoch
          - test-name: tests::epoch_21::transition_adds_burn_block_height
          - test-name: tests::epoch_21::transition_adds_get_pox_addr_recipients
          - test-name: tests::epoch_21::transition_adds_mining_from_segwit
          - test-name: tests::epoch_21::transition_adds_pay_to_alt_recipient_contract
          - test-name: tests::epoch_21::transition_adds_pay_to_alt_recipient_principal
          - test-name: tests::epoch_21::transition_empty_blocks
          - test-name: tests::epoch_21::transition_fixes_bitcoin_rigidity
          - test-name: tests::epoch_21::transition_removes_pox_sunset
          - test-name: tests::epoch_22::disable_pox
          - test-name: tests::epoch_22::pox_2_unlock_all
          - test-name: tests::epoch_22::test_pox_reorg_one_flap
          - test-name: tests::epoch_23::trait_invocation_behavior
          - test-name: tests::epoch_24::fix_to_pox_contract
          - test-name: tests::epoch_24::verify_auto_unlock_behavior
          # Disable this flaky test. We don't need continue testing Epoch 2 -> 3 transition
          - test-name: tests::nakamoto_integrations::flash_blocks_on_epoch_3_FLAKY

    steps:
      ## Setup test environment
      - name: Setup Test Environment
        id: setup_tests
        uses: stacks-network/actions/stacks-core/testenv@main
        with:
          btc-version: "25.0"

      ## Increase open file descriptors limit
      - name: Increase Open File Descriptors
        run: |
          sudo prlimit --nofile=4096:4096

      ## Run test matrix using restored cache of archive file
      ##   - Test will timeout after env.TEST_TIMEOUT minutes
      - name: Run Tests
        id: run_tests
        timeout-minutes: ${{ fromJSON(env.TEST_TIMEOUT) }}
        uses: stacks-network/actions/stacks-core/run-tests@main
        with:
          test-name: ${{ matrix.test-name }}
          threads: 1

      ## Create and upload code coverage file
      - name: Code Coverage
        id: codecov
        uses: stacks-network/actions/codecov@main
        with:
          test-name: ${{ matrix.test-name }}

  check-tests:
    name: Check Tests
    runs-on: ubuntu-latest
    if: always()
    needs:
      - integration-tests
    steps:
      - name: Check Tests Status
        id: check_tests_status
        uses: stacks-network/actions/check-jobs-status@main
        with:
          jobs: ${{ toJson(needs) }}
          summary_print: "true"
